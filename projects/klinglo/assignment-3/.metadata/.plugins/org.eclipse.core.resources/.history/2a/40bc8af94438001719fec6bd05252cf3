package edu.osu.cs362;
/**
 *  This class provides a basic set of test cases for the
 *  CalDay class.
 */
//import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
//import java.util.LinkedList;

import org.junit.Test;

import static org.junit.Assert.*;

public class CalDayTest {

	//Test the default constructor for the normal calendar (CalDay)
	@Test
	public void test01()  throws Throwable  {
		CalDay calendarDay = new CalDay();
		// Invalid before initialization
		assertFalse(calendarDay.isValid());
	}

	//Test the constructor for the Gregorian Calendar (GregorianCalendar)
    @Test
    public void test02() {
		GregorianCalendar calendar = new GregorianCalendar(2018, 6, 17);
		CalDay calendarDay = new CalDay(calendar);

		assertEquals(2018, calendarDay.year);
		assertEquals(6, calendarDay.month);
		assertEquals(17, calendarDay.day);
    }

    //Tests iterators through both calendar types
    @Test
	public void test03() {
		int year = 2017,
			month = 7,
			day = 1;

		GregorianCalendar calendar = new GregorianCalendar(year, month, day);
		CalDay calendarDay = new CalDay(calendar);
		Appt appointment1 = new Appt(6, 45, day, month, year, "Wake Up", null),
			appointment2 = new Appt(22, 45, day, month, year, "Go to Sleep", null);

		calendarDay.addAppt(appointment1);
		calendarDay.addAppt(appointment2);

		Iterator<?> apptsIterator = calendarDay.iterator();

		// Appts from CalDay's iterator should match originals
		assertEquals(appointment1, apptsIterator.next());
		assertEquals(appointment2, apptsIterator.next());

		// Try iterator with invalid CalDay
		calendarDay = new CalDay();
		assertEquals(null, calendarDay.iterator());
	}

    //Test calendarDay.getYear(), calendarDay.getMonth(), calendarDay.getDay()
    @Test
	public void test04() {
    	int year = 2017,
    		month = 5,
    		day = 25;
    	GregorianCalendar gregCalendar = new GregorianCalendar(year, month, day);
    	CalDay calendarDay = new CalDay(gregCalendar);

    	// Getters should match values used in construction
    	assertEquals(year, calendarDay.getYear());
    	assertEquals(month, calendarDay.getMonth());
    	assertEquals(day, calendarDay.getDay());
	}

    //Test addAppt()
    @Test
	public void test05() {
    	int year = 2017,
    		month  = 8,
    		day = 2;

    	GregorianCalendar gregCalendar = new GregorianCalendar(year, month, day);
    	CalDay calendarDay = new CalDay(gregCalendar);

    	Appt appointment1 = new Appt(12,30, day, month, year, "First", null),
			appointment2 = new Appt(14, 45, day, month, year, "Second", null),
			invalidAppointment = new Appt(3000, 0, day, month, year, "Invalid", null);

    	// Ensure appointments are valid
    	assertTrue(appointment1.getValid());
    	assertTrue(appointment2.getValid());
    	assertFalse(invalidAppointment.getValid());

    	// There are no existing Appts
		assertEquals(0, calendarDay.getSizeAppts());

    	// One appointment added
		calendarDay.addAppt(appointment1);
		assertEquals(appointment1, calendarDay.getAppts().getFirst());

		// Two appointments added
		calendarDay.addAppt(appointment2);
		assertEquals(appointment2, calendarDay.getAppts().getLast());

		// Adding invalid Appts should not affect CalDay size
		int size = calendarDay.getSizeAppts();
		calendarDay.addAppt(invalidAppointment);
		assertEquals(size, calendarDay.getSizeAppts());
	}


    //Test toString()
	@Test
	public void test06() {
		int year = 2017,
			month  = 5,
			day = 26;

		GregorianCalendar gregCalendar = new GregorianCalendar(year, month, day);
		CalDay calendarDay = new CalDay(gregCalendar);

		Appt appointment1 = new Appt(18, 10, day, month, year, "Evening", null),
			appointment2 = new Appt(7, 30, day, month, year, "Morning", null);

		calendarDay.addAppt(appointment1);
		calendarDay.addAppt(appointment2);

		//Appointments added successfully
		assertEquals(2, calendarDay.getSizeAppts());

		// String is correct
		assertEquals("\t --- 5/26/2017 --- \n" +
				" --- -------- Appointments ------------ --- \n" +
				"\t5/26/2017 at 7:30am ,Morning, \n" +
				" \t5/26/2017 at 6:10pm ,Evening, \n" +
				" \n",
				calendarDay.toString());

		// Invalid CalDay should print nothing
		calendarDay.valid = false;
		assertEquals("", calendarDay.toString());
	}
	@Test
	public void test011()  throws Throwable  {
		GregorianCalendar gregCal = new GregorianCalendar();
		CalDay calDayTest = new CalDay(gregCal);
		assertEquals(calDayTest.getDay(), gregCal.get(gregCal.DAY_OF_MONTH));
		assertEquals(calDayTest.getMonth(), gregCal.get(gregCal.MONTH));
		assertEquals(calDayTest.getYear(), gregCal.get(gregCal.YEAR));
	}

	@Test
	public void test021()  throws Throwable  {
		int startHour=13;
		int startMinute=30;
		int startDay=10;
		int startMonth=4;
		int startYear=2017;
		String title="Birthday Party";
		String description="This is my birthday party.";
		//Construct a new Appointment object with the initial data	 
		Appt appt = new Appt(startHour, startMinute , startDay , startMonth , startYear , title, description);
		CalDay testCalDay = new CalDay(new GregorianCalendar());
		testCalDay.addAppt(appt);

		for(int i = 0; i < 10; i++){
			startHour++;
			appt = new Appt(startHour, startMinute , startDay , startMonth , startYear , title, description);
			testCalDay.addAppt(appt);
		}
		startHour = 13;
		Iterator<?> itr = testCalDay.iterator();
		while(itr.hasNext()){
			assertEquals(startHour, ((Appt)itr.next()).getStartHour());
			startHour++;
		}
		assertNotNull(testCalDay.toString());
	}

	@Test
	public void test031() throws Throwable{
		Appt appt = new Appt(115,45,14,11,2017,"Jeremy","This is Jeremy"); //Note that if you switch this to an invalid appt
		CalDay cd = new CalDay();										// (change 1 to 1234) you will pass the test
		cd.addAppt(appt);
	}

	@Test
	public void test041() throws Throwable{
		CalDay cd = new CalDay();										// (change 1 to 1234) you will pass the test
		assertNull(cd.iterator());
	}

	@Test
	public void test051() throws Throwable{
		Appt appt = new Appt(112,45,14,11,2017,"Jeremy","This is Jeremy");
		CalDay cd = new CalDay(new GregorianCalendar());
		cd.addAppt(appt);
		assertNotNull(cd.toString());
		assertEquals(0,cd.getSizeAppts());
	}
	
	@Test
	public void test061() throws Throwable{
		Appt appt1 = new Appt(2,45,14,11,2017,"Jeremy","This is Jeremy");
		Appt appt2 = new Appt(1,45,14,11,2017,"Jeremy","This is Jeremy");
		CalDay cd = new CalDay(new GregorianCalendar());
		cd.addAppt(appt1);
		cd.addAppt(appt2);
		assertEquals(1,cd.getAppts().getFirst().getStartHour());
		
	}

	@Test
	public void test07() throws Throwable{
		CalDay cd = new CalDay();
		assertEquals("",cd.toString());
		
		
	}
}
