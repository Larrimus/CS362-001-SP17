package edu.osu.cs362;
/**
 *  This class provides a basic set of test cases for the
 *  TimeTable class.
 */
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;


import org.junit.Test;

import static org.junit.Assert.*;

public class TimeTableTest {

	 @Test
	  public void test01()  throws Throwable  {
		 TimeTable timeTable = new TimeTable();
			int year = 2019;

			int firstDay = 28;
			int firstMonth = 3;
			GregorianCalendar firstDayCalendar = new GregorianCalendar(year, firstMonth, firstDay);
			Appt firstAppt = new Appt(9, 30, firstDay, firstMonth, year, "First", null);

			int secondDay = 4;
			int secondMonth = 4;
			Appt secondAppt = new Appt(9, 30, secondDay, secondMonth, year, "Second", null);

			GregorianCalendar secondDayCalendar = new GregorianCalendar(year, secondMonth, secondDay+1);

			LinkedList<Appt> appts = new LinkedList<Appt>();
			appts.add(firstAppt);
			appts.add(secondAppt);

			LinkedList<CalDay> calDayList = timeTable.getApptRange(appts, firstDayCalendar, secondDayCalendar);

			// Days are a week apart (plus one which is excluded)
			assertEquals(7, calDayList.size());

			// Appts should match, and other CalDays should have no Appts
			for (CalDay day : calDayList) {
				if (day.getDay() == firstDay) {
					assertEquals(firstAppt, day.getAppts().getFirst());
				} else if (day.getDay() == secondDay) {
					assertEquals(secondAppt, day.getAppts().getFirst());
				} else
					assertEquals(0, day.getSizeAppts());
			}

			// Try with an invalid Appt
			Appt invalidAppt = new Appt(25, 65, 99, 13, 0, null, null);
			appts.add(invalidAppt);
			calDayList = timeTable.getApptRange(appts, firstDayCalendar, secondDayCalendar);

			// There should still be only two appointments
			int count = 0;
			for (CalDay day : calDayList)
				count += day.getSizeAppts();
			assertEquals(2, count);

			// Try with days in wrong order
			exception.expect(IllegalArgumentException.class);
			calDayList = timeTable.getApptRange(appts, secondDayCalendar, firstDayCalendar);
		}

		@Test
		public void deleteApptTest() {
			TimeTable timeTable = new TimeTable();
			Appt appointment = new Appt(15, 0, 25, 5, 2009, null, null);
			LinkedList<Appt> appointments = new LinkedList<Appt>();

			appointments.add(appointment);
			assertEquals(1, appointments.size());

			// Test that appointment was deleted successfully
			timeTable.deleteAppt(appointments, appointment);
			assertEquals(0, appointments.size());

			// Try with invalid appointment
			appointment.setStartMonth(44);
			timeTable.deleteAppt(appointments, appointment);

			// Try with null arguments
			timeTable.deleteAppt(null, appointment);
			timeTable.deleteAppt(appointments, null);
		}

}
